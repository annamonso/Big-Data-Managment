import duckdb
import os
import sys
from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.utils.dates import days_ago

from trusted_zone.trustedManager import TrustedZone
from exploitation_zone.exploitationManager import ExploitationZone

# --- Configuration ---
DUCKDB_FILE_PATH = '/opt/airflow/duckdb_data/exploitation_zone.duckdb'

###################################
#        METHODS FOR DAG          #
###################################

def run_exploitation_zone_pipeline():
    """
    Airflow task function to:
    
    DESCRIBE WHAT IT DOES

    """
    print("Starting Exploitation Zone Pipeline...")
    try:

        # 1. Initialize ExploitationZone manager
        exploitation_zone = ExploitationZone()
        print("ExploitationZone Manager Initialized")

        exploitation_zone.get_trusted_zone_data()
        exploitation_zone.apply_transformations()
        exploitation_zone.print_all_tables_head()


        print("Exploitation Zone Pipeline finished successfully.")

    except ValueError as ve:
        print(f"ValueError during Exploitation Zone pipeline: {ve}")
        raise
    except ImportError as ie:
         print(f"ImportError during Exploitation Zone pipeline (check dependencies like 'deltalake' or 'pyspark'): {ie}")
         raise
    except Exception as e:
        print(f"An unexpected error occurred in the Exploitation Zone pipeline: {e}")
        raise

###################################
#        DAG CONFIGURATION        #
###################################

default_args = {
    "owner": "airflow",
    "depends_on_past": False,
    "start_date": days_ago(1),
    "retries": 1, 
    "retry_delay": timedelta(minutes=1), 
    "execution_timeout": timedelta(hours=1), 
}

###################################
#          DAG DEFINITION         #
###################################

# Use with statement for DAG definition (best practice)
with DAG(
    dag_id="3_ExploitationZone", 
    default_args=default_args,
    description="Loads data from DuckDB Trusted Zone to the Exploitation Zone",
    schedule_interval="@daily", 
    catchup=False, 
    tags=['exploitation-zone', 'duckdb'], 
) as dag:

    process_landing_to_trusted_task = PythonOperator(
        task_id="process_trusted_to_exploitation",
        python_callable=run_exploitation_zone_pipeline,
    )